// <auto-generated />
using AdvocacyPro.Data;
using AdvocacyPro.Models.Auth;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.Extensions.Logging;
using System;

namespace AdvocacyPro.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdvocacyPro.Models.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("Address1")
                        .HasMaxLength(50);

                    b.Property<string>("Address2")
                        .HasMaxLength(50);

                    b.Property<string>("Address3")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasMaxLength(30);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("DayPhone")
                        .HasMaxLength(20);

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EveningPhone")
                        .HasMaxLength(20);

                    b.Property<string>("Fax")
                        .HasMaxLength(20);

                    b.Property<string>("FirstName")
                        .HasMaxLength(20);

                    b.Property<string>("Initials")
                        .HasMaxLength(5);

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<string>("LastName")
                        .HasMaxLength(20);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("State")
                        .HasMaxLength(30);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<int?>("Age");

                    b.Property<bool>("Archived");

                    b.Property<DateTime>("CaseDate");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(20);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<int?>("EthnicityId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<int?>("GenderId");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<int>("OrganizationId");

                    b.Property<int?>("RaceId");

                    b.Property<int?>("StaffUserId");

                    b.Property<int?>("StateId");

                    b.Property<int>("StatusId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(20);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RaceId");

                    b.HasIndex("StaffUserId");

                    b.HasIndex("StateId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseId");

                    b.Property<DateTime>("ContactDate");

                    b.Property<int?>("ContactTypeId");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<string>("Notes");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseContact");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseCourtDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArrestDate");

                    b.Property<decimal>("BondAmount");

                    b.Property<int>("BondTypeId");

                    b.Property<int>("CaseId");

                    b.Property<string>("Court")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<string>("DocketNumber")
                        .HasMaxLength(100);

                    b.Property<int>("DocketTypeId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("Police")
                        .HasMaxLength(250);

                    b.Property<string>("Purpose");

                    b.Property<string>("Reason");

                    b.Property<DateTime?>("StartDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("BondTypeId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DocketTypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseCourtDate");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseCVCApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationStatusId");

                    b.Property<DateTime?>("CVCDate");

                    b.Property<string>("CVCNumber");

                    b.Property<int>("CaseId");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<string>("Defendant")
                        .HasMaxLength(100);

                    b.Property<string>("Notes");

                    b.Property<int>("OffenseTypeId");

                    b.Property<string>("ReferralOther")
                        .HasMaxLength(50);

                    b.Property<int?>("ReferralTypeId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OffenseTypeId");

                    b.HasIndex("ReferralTypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseCVCApplication");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseId");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<int?>("DocumentTypeId");

                    b.Property<byte[]>("File");

                    b.Property<string>("FileName")
                        .HasMaxLength(250);

                    b.Property<string>("Notes");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseDocument");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseEmergencyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<int?>("Age");

                    b.Property<int>("CaseId");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(20);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<int?>("EthnicityId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<int?>("GenderId");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<int?>("RaceId");

                    b.Property<int?>("StateId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(20);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("RaceId");

                    b.HasIndex("StateId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseEmergencyContact");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseIncident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseId");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<string>("Disposition")
                        .HasMaxLength(50);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("LocationTypeId");

                    b.Property<string>("Notes");

                    b.Property<DateTime>("OccurrenceDate");

                    b.Property<int>("OffenseId");

                    b.Property<DateTime>("ReportDate");

                    b.Property<int>("StaffUserId");

                    b.Property<int>("StatusId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("OffenseId");

                    b.HasIndex("StaffUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseIncident");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseInterview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseId");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("InterviewDate");

                    b.Property<string>("InterviewerName")
                        .HasMaxLength(250);

                    b.Property<int>("InterviewerPositionId");

                    b.Property<string>("Notes");

                    b.Property<string>("Observers");

                    b.Property<bool>("OnSite");

                    b.Property<bool>("Planned");

                    b.Property<bool>("ProtocolFollowed");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InterviewerPositionId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseInterview");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseInterviewDocumentationType", b =>
                {
                    b.Property<int>("CaseInterviewId");

                    b.Property<int>("InterviewDocumentationTypeId");

                    b.HasKey("CaseInterviewId", "InterviewDocumentationTypeId");

                    b.HasIndex("InterviewDocumentationTypeId");

                    b.ToTable("CaseInterviewDocumentationType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseLetter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseId");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<int>("LanguageId");

                    b.Property<int>("LetterTypeId");

                    b.Property<string>("Notes");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LetterTypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseLetter");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseId");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<string>("Notes");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseNote");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseOffender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<int?>("Age");

                    b.Property<int?>("AgeGroupingId");

                    b.Property<int>("CaseId");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(20);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<int?>("EthnicityId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<int?>("GenderId");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<int?>("NumberOfOffenses");

                    b.Property<bool>("PriorOffenses");

                    b.Property<int?>("RaceId");

                    b.Property<int?>("RelationshipTypeId");

                    b.Property<int?>("StateId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(20);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("AgeGroupingId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("RaceId");

                    b.HasIndex("RelationshipTypeId");

                    b.HasIndex("StateId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseOffender");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CasePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AmountApproved");

                    b.Property<decimal?>("AmountSubmitted");

                    b.Property<int?>("ApprovedById");

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<int>("CaseId");

                    b.Property<string>("ClaimId");

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<int?>("PaymentCategoryId");

                    b.Property<int?>("PayorId");

                    b.Property<int?>("SubmittedById");

                    b.Property<DateTime?>("SubmittedDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PaymentCategoryId");

                    b.HasIndex("PayorId");

                    b.HasIndex("SubmittedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CasePayment");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CasePolice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseId");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<string>("Notes");

                    b.Property<string>("PoliceCaseNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("PoliceClosedDate");

                    b.Property<string>("PoliceDepartment")
                        .HasMaxLength(100);

                    b.Property<string>("PoliceOutcome");

                    b.Property<string>("PoliceSequenceNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CasePolice");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseProtectiveOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseId");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("Notes");

                    b.Property<int>("OrderStatusId");

                    b.Property<int>("OrderTypeId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseProtectiveOrder");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseReferral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseId");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ContactDate");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime?>("FollowupDate");

                    b.Property<string>("Notes");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TypeId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseReferral");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseId");

                    b.Property<int>("CategoryId");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("Notes");

                    b.Property<int?>("PopulationId");

                    b.Property<int>("ProgramId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PopulationId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseService");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseVictimization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaseId");

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<string>("ReportDetails");

                    b.Property<string>("ReportNumber")
                        .HasMaxLength(100);

                    b.Property<string>("ReportingAgency")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("StartDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.Property<int>("VictimTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("VictimTypeId");

                    b.ToTable("CaseVictimization");
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseWitness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<int?>("Age");

                    b.Property<int>("CaseId");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(20);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<int?>("EthnicityId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<int?>("GenderId");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20);

                    b.Property<DateTime>("InterviewDate");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<string>("Notes");

                    b.Property<int?>("RaceId");

                    b.Property<int?>("RelationshipTypeId");

                    b.Property<int?>("StateId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(20);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("RaceId");

                    b.HasIndex("RelationshipTypeId");

                    b.HasIndex("StateId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CaseWitness");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Fire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Archived");

                    b.Property<int>("CauseId");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreatedById");

                    b.Property<string>("Disposition")
                        .HasMaxLength(100);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("LocationTypeId");

                    b.Property<string>("Notes");

                    b.Property<DateTime?>("OccurrenceDate");

                    b.Property<int>("OrganizationId");

                    b.Property<DateTime?>("ReportDate");

                    b.Property<int?>("StaffUserId");

                    b.Property<int>("StatusId");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<int?>("UpdatedById");

                    b.HasKey("Id");

                    b.HasIndex("CauseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StaffUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Fire");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Logging.LogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EventDate");

                    b.Property<int>("EventId");

                    b.Property<int>("LogLevel");

                    b.Property<string>("Message");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Utility.ObjectVersion", b =>
                {
                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250);

                    b.Property<long>("Version");

                    b.HasKey("Type");

                    b.ToTable("ObjectVersion");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.AgeGrouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("AgeGrouping");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatus");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.BondType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("BondType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("ContactType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.DocketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("DocketType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.Ethnicity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("Ethnicity");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.FireCause", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("FireCause");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.InterviewDocumentationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("InterviewDocumentationType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.InterviewerPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("InterviewerPosition");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.LetterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("LetterType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("LocationType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.Offense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CleryReport");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Offense");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.OffenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("OffenseType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("OrderType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1")
                        .HasMaxLength(50);

                    b.Property<string>("Address2")
                        .HasMaxLength(50);

                    b.Property<string>("Address3")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description");

                    b.Property<string>("Email")
                        .HasMaxLength(40);

                    b.Property<string>("Fax")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("LastModifiedDate");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("PrimaryContact")
                        .HasMaxLength(50);

                    b.Property<int>("Product");

                    b.Property<string>("State")
                        .HasMaxLength(30);

                    b.Property<int>("TypeId");

                    b.Property<string>("Url")
                        .HasMaxLength(100);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.OrganizationFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationFeature");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.OrganizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("OrganizationType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.PaymentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("PaymentCategory");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.Payor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("Payor");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.ReferralType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("ReferralType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.RelationshipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("RelationshipType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("ServiceCategory");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.ServicePopulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("ServicePopulation");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.ServiceProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ServiceProgram");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.VictimType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("VictimType");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.ZipCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("FIPS")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ZipCode");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<int>("UserId");

                    b.Property<string>("ProviderDisplayName");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("AdvocacyPro.Models.Auth.User", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Values.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.Case", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Ethnicity")
                        .WithMany()
                        .HasForeignKey("EthnicityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("StaffUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseContact", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("ContactLog")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseCourtDate", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Values.BondType")
                        .WithMany()
                        .HasForeignKey("BondTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("CourtDates")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.DocketType")
                        .WithMany()
                        .HasForeignKey("DocketTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseCVCApplication", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Values.ApplicationStatus")
                        .WithMany()
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("CVCApplications")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.OffenseType")
                        .WithMany()
                        .HasForeignKey("OffenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.ReferralType")
                        .WithMany()
                        .HasForeignKey("ReferralTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseDocument", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("Documents")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseEmergencyContact", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("EmergencyContacts")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Ethnicity")
                        .WithMany()
                        .HasForeignKey("EthnicityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseIncident", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("Incidents")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Offense")
                        .WithMany()
                        .HasForeignKey("OffenseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("StaffUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseInterview", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("Interviews")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.InterviewerPosition")
                        .WithMany()
                        .HasForeignKey("InterviewerPositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseInterviewDocumentationType", b =>
                {
                    b.HasOne("AdvocacyPro.Models.CaseInterview")
                        .WithMany("CaseInterviewDocumentationTypes")
                        .HasForeignKey("CaseInterviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.InterviewDocumentationType")
                        .WithMany()
                        .HasForeignKey("InterviewDocumentationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseLetter", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("Letters")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.LetterType")
                        .WithMany()
                        .HasForeignKey("LetterTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseNote", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("Notes")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseOffender", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Values.AgeGrouping")
                        .WithMany()
                        .HasForeignKey("AgeGroupingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("Offenders")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Ethnicity")
                        .WithMany()
                        .HasForeignKey("EthnicityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.RelationshipType")
                        .WithMany()
                        .HasForeignKey("RelationshipTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CasePayment", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("Payments")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.PaymentCategory")
                        .WithMany()
                        .HasForeignKey("PaymentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Payor")
                        .WithMany()
                        .HasForeignKey("PayorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("SubmittedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CasePolice", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("Police")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseProtectiveOrder", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("ProtectiveOrders")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseReferral", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("Referrals")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.ReferralType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseService", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("Services")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.ServiceCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.ServicePopulation")
                        .WithMany()
                        .HasForeignKey("PopulationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.ServiceProgram")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseVictimization", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("Victimizations")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.VictimType")
                        .WithMany()
                        .HasForeignKey("VictimTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.CaseWitness", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Case")
                        .WithMany("Witnesses")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Ethnicity")
                        .WithMany()
                        .HasForeignKey("EthnicityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.RelationshipType")
                        .WithMany()
                        .HasForeignKey("RelationshipTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.Fire", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Values.FireCause")
                        .WithMany()
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("StaffUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Values.Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvocacyPro.Models.Auth.User")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.Offense", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Values.OffenseType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.Organization", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Values.OrganizationType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.OrganizationFeature", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Values.Organization")
                        .WithMany("Features")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AdvocacyPro.Models.Values.ServiceProgram", b =>
                {
                    b.HasOne("AdvocacyPro.Models.Values.ServiceCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
